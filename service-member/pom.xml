<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.lnson.member</groupId>
    <artifactId>service-member</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>lnson-member-dao</module>
        <module>lnson-member-entity</module>
        <module>lnson-member-service</module>
        <module>lnson-member-service-application</module>
        <module>lnson-service-common</module>
    </modules>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.jdkVersion>1.8</project.build.jdkVersion>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <!--
        TODO
         - SpringCloud-Alibaba 与 SpringBoot版本依赖关系
         - https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明
        -->
        <spring-cloud-alibaba-dependencies.version>2.2.1.RELEASE</spring-cloud-alibaba-dependencies.version>
        <spring-cloud-dependencies.version>Hoxton.SR3</spring-cloud-dependencies.version>
        <spring-boot-dependencies.version>2.2.5.RELEASE</spring-boot-dependencies.version>

        <!-- TODO - SpringBoot2.x整合dubbo：版本管理 -->
        <dubbo.starter.version>0.2.1.RELEASE</dubbo.starter.version>
        <dubbo.version>2.6.5</dubbo.version>
        <curator-framework.version>4.0.1</curator-framework.version>
        <zookeeper.version>3.4.9</zookeeper.version>
        <netty-all.version>4.1.32.Final</netty-all.version>

        <mybatis-spring-boot-starter.version>1.3.1</mybatis-spring-boot-starter.version>
        <mapper-spring-boot-starter.version>1.1.4</mapper-spring-boot-starter.version>
        <pagehelper-spring-boot-starter.version>1.2.10</pagehelper-spring-boot-starter.version>
        <druid-spring-boot-starter.version>1.1.17</druid-spring-boot-starter.version>
        <mysql.version>8.0.17</mysql.version>
        <ojdbc6.version>6</ojdbc6.version>
        <logback.version>4.11</logback.version>
        <lombok.version>1.16.22</lombok.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- spring cloud alibaba 依赖项 引入 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring cloud 依赖项 引入 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring boot 依赖项 引入 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- dubbo 依赖项 引入-->
            <dependency>
                <groupId>com.alibaba.boot</groupId>
                <artifactId>dubbo-spring-boot-starter</artifactId>
                <version>${dubbo.starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>dubbo</artifactId>
                <version>${dubbo.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator-framework.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>${zookeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty-all.version}</version>
            </dependency>
            <!-- mybatis 相关依赖 引入 -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis-spring-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>tk.mybatis</groupId>
                <artifactId>mapper-spring-boot-starter</artifactId>
                <version>${mapper-spring-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>${pagehelper-spring-boot-starter.version}</version>
            </dependency>
            <!-- druid数据源 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid-spring-boot-starter.version}</version>
            </dependency>
            <!-- mysql驱动 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!-- oracle驱动 -->
            <dependency>
                <groupId>com.oracle</groupId>
                <artifactId>ojdbc6</artifactId>
                <version>${ojdbc6.version}</version>
            </dependency>
            <!--logback日志组件-->
            <dependency>
                <groupId>net.logstash.logback</groupId>
                <artifactId>logstash-logback-encoder</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <!--lombok插件-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!--jackson配置：识别Guava包的类-->
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-guava</artifactId>
                <version>2.9.9</version>
                <exclusions>
                    <exclusion>
                        <groupId>com.google.guava</groupId>
                        <artifactId>guava</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <!-- 反射工具包 -->
            <dependency>
                <groupId>org.reflections</groupId>
                <artifactId>reflections</artifactId>
                <version>0.9.10</version>
                <exclusions>
                    <exclusion>
                        <groupId>com.google.guava</groupId>
                        <artifactId>guava</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.googlecode.gentyref</groupId>
                <artifactId>gentyref</artifactId>
                <version>1.2.0</version>
            </dependency>
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>18.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!--指定maven编译的jdk版本-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                    <compilerArguments>
                        <verbose/>
                        <bootclasspath>${java.home}/lib/rt.jar</bootclasspath>
                    </compilerArguments>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <delimiters>
                        <delimit>@</delimit>
                    </delimiters>
                </configuration>
            </plugin>
            <!--用于maven构建时执行一个应用的单元测试-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18</version>
                <configuration>
                    <!-- 此值为true则忽略测试中的构建错误 -->
                    <testFailureIgnore>false</testFailureIgnore>
                    <!-- 此值为true则不执行单元测试 -->
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- 处理依赖关系 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.1</version>
                    <executions>
                        <execution>
                            <id>copy</id>
                            <phase>package</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <outputDirectory>${project.build.directory}/classes/libs/</outputDirectory>
                        <includeScope>runtime</includeScope>
                        <useSubDirectoryPerArtifact>false</useSubDirectoryPerArtifact>
                        <stripVersion>false</stripVersion>
                        <overWriteReleases>false</overWriteReleases>
                        <overWriteSnapshots>false</overWriteSnapshots>
                        <overWriteIfNewer>true</overWriteIfNewer>
                        <copyPom>false</copyPom>
                    </configuration>
                </plugin>
                <!-- springboot工程打包插件 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.1.7.RELEASE</version>
                    <configuration>
                        <!-- 是否打出可执行的jar包(仅支持Linux格式) -->
                        <executable>true</executable>
                        <!-- 插件方式指定打包类型以及启动类 -->
                        <mainClass>org.springframework.boot.loader.JarLauncher</mainClass>
                        <layout>JAR</layout>
                        <!--
                        <mainClass>org.springframework.boot.loader.warLauncher</mainClass>
                        <layout>WAR</layout>
                        -->
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <!-- 默认goal。在mvn package之后，再次打包可执行的jar/war，同时保留mvn package生成的jar/war为.origin -->
                                <goal>repackage</goal>
                                <!-- 运行Spring Boot工程
                                <goal>run</goal>
                                     在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
                                <goal>start</goal>
                                     在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
                                <goal>stop</goal>
                                -->
                                <!-- 生成Actuator使用的构建信息文件build-info.properties -->
                                <goal>build-info</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>